{% macro fields(method, scope) %}
{% for field in method.fields() %}
{{ field.name() }}{{ "" if field.is_required() else "?" }}: {{ field.js_type(scope) }};
{% endfor %}
{% endmacro %}

{% macro types_for_scope(scope) %}

//
// Enums.
//

{% for enum in scope.enums() %}
export type {{ enum.name() }} =
{% for value in enum.values() %}
    | "{{ value }}"{{ ";" if loop.last else "" }}
{% endfor %}

{% endfor %}


//
// Subtypes used in request/response types.
//

{% set request_response_messages = scope.request_response_messages() %}
{% for message in scope.messages() %}
{% if message not in request_response_messages %}
export interface {{ message.name() }} {
    {{ fields(message, scope) | indent(4) }}
};

{% endif %}
{% endfor %}
{% endmacro %}

{% macro gen_service(service, scope, version='2.0') %}
//
// Request/response types.
//


{% for method in service.methods() %}
export interface {{ method.request_message().name() }}Request {
    {{ fields(method.request_message(), scope) | indent(4) }}
};

export interface {{ method.request_message().name() }}Response {
    {{ fields(method.response_message(), scope) | indent(4) }}
};

{% endfor %}

export class {{ service.name() }} {
    readonly client: ApiClient;

    constructor(client: ApiClient) {
        this.client = client;
    }

{% for method in service.methods() %}
    async {{ service.sanitize_method_name(method.name()) }}(request: {{ method.request_message().name() }}Request): Promise<{{ method.request_message().name() }}Response> {
        return (await this.client.request(
            "/api/{{ version }}{{ method.rpc_options()['path'] }}",
            "{{ method.rpc_options()['method'] }}",
            request
        )) as {{ method.request_message().name() }}Response;
    }

{% endfor %}
};

{% endmacro %}
