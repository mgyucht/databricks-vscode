{% import '_helpers.py.jinja2' as helpers %}

{% macro args(method) -%}
{%- for arg in method.request_message().databricks_cli_ordered_args(method, tail=['headers', 'version']) %}
{{ arg }}{{ ", " if not loop.last else "" }}
{%- endfor %}
{%- endmacro %}

class {{ service.name() }}(object):
    def __init__(self, client):
        self.client = client

    {% for method in service.methods() %}
    def {{ method.name_snake() }}({{ args(method) }}):
        _data = {}
        {% for field in method.request_message().databricks_cli_ordered_fields(method) %}
        if {{ field.name() }} is not None:
            _data['{{ field.name() }}'] = {{ field.name() }}
            {% if field.is_message_type() %}
            if not isinstance({{ field.name() }}, dict):
                raise TypeError('Expected databricks.{{ field.field_type_basename() }}() or dict for field {{ field.name() }}')
            {% endif %}
        {% endfor %}
        return self.client.perform_query('{{ method.rpc_options()['method'] }}', {{ helpers.path(method) }}, data=_data, headers=headers, version=version)

    {% endfor %}
